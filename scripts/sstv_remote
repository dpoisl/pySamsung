#!/usr/bin/python

from __future__ import unicode_literals

import os
import time
from argparse import ArgumentParser

import samsung


def parse_options():
    """
    parse command line arguments and options

    :return: options and arguments
    """
    description = '''Send commands to Samsung D-Series (and up) devices.
Commands can either start with 'KEY_' and be a valid key code or any
text (eG usable for password fields, etc.).'''
    p = ArgumentParser(description=description)
    p.add_argument('-i', '--ip', dest='ip', help='Device IP (mandatory if you '
                   'don\'t set SAMSUNG_DEVICE in your environment)')
    p.add_argument('-p', '--port', dest='port', action='store', type='int',
                   default='55000', help='Device Port (default %(default)s')
    p.add_argument('-d', '--delay', dest='delay', action='store', type='float',
                   default='0.5', help='Delay between commands in seconds ('
                   'default: %(default)s')
    p.add_argument('keys', nargs='+')
    args = p.parse_args()
    if args.ip is None:
        try:
            args.ip = os.environ['SAMSUNG_DEVICE']
        except KeyError:
            p.error('Either set SAMSUNG_DEVICE in the environment or specify '
                    'the device IP\n')
    if len(args.keys) == 0:
        p.error('Please specify one or more commands to send\n')
    return args

def main():
    (options, args) = parse_options()
    device = samsung.SmartTV('pyremote', host=options.ip, port=options.port)
    for arg in args:
        if arg.startswith('KEY_'):
            print('%r' % device.send_key(arg))
        elif arg.startswith('CH'):
            for digit in '%04d' % int(arg[2:]):
                device.send_key('KEY_' + digit)
        else:
            print('%r' % device.send_text(arg))
        time.sleep(options.delay)
        print('%r' % samsung.Message.parse(device.recv()))
        print('%r' % samsung.Message.parse(device.recv()))
        print('%r' % samsung.Message.parse(device.recv()))
    device.disconnect()

if __name__ == '__main__':
    main()
